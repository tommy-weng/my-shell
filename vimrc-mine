" Tab width
set tabstop=4
set softtabstop=4
set expandtab

" Indent width
set shiftwidth=4
set cindent

" Set line number
set nu

" Auto complete
function! OpenPair(open, close)
  let line = getline('.')
  if col('.') > strlen(line) || line[col('.') - 1] == ' ' || line[col('.') - 1] == a:close
    return a:open.a:close."\<ESC>i"
  else
    return a:open
  endif
endfunction

function! ClosePair(close)
  let line = getline('.')
  if ExistPair() == 1 && line[col('.') - 1] != ''
    return "\<Right>"
  else
    return a:close
  endif
endfunction

function! ExistPair()
  let l:original_pos = getpos(".")
  execute "normal %"
  let l:new_pos1 = getpos(".")
  execute "normal %"
  let l:new_pos2 = getpos(".")
  call setpos(".", l:original_pos)
  if l:new_pos1 == l:new_pos2
    return 0
  else
    if l:new_pos1[2] != l:new_pos2[2]
      return 1
    else
      return 2
    endif
  endif
endfunction  

function! BracePair()
  if getline('.')[col('.') - 2] == '{'
    let l:status = ExistPair()
    if l:status == 0
      return "\<CR>}\<ESC>O"
    elseif l:status == 1
      return "\<CR>\<ESC>O"
    endif
  endif
  return "\<CR>"
endfunction

:inoremap ( <c-r>=OpenPair('(', ')')<CR>
:inoremap ) <c-r>=ClosePair(')')<CR>

:inoremap [ <c-r>=OpenPair('[', ']')<CR>
:inoremap ] <c-r>=ClosePair(']')<CR>

:inoremap " <c-r>=OpenPair('"', '"')<CR>
:inoremap ' <c-r>=OpenPair("'", "'")<CR>

:inoremap <CR> <c-r>=BracePair()<CR>

